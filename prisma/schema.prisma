// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id              String   @id @default(cuid())
  email           String   @unique
  firstName       String
  lastName        String
  phone           String?
  address         String
  city            String
  state           String
  zipCode         String
  stripeCustomerId String? @unique
  
  // Customer preferences
  preferredDays   String[]  // e.g., ["monday", "wednesday"]
  preferredTime   String?   // e.g., "morning", "afternoon"
  specialNotes    String?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  appointments    Appointment[]
  invoices        Invoice[]
  subscriptions   Subscription[]
  
  @@map("customers")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  basePrice   Float    // Base price in dollars
  duration    Int      // Duration in minutes
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  appointmentServices AppointmentService[]
  subscriptionServices SubscriptionService[]
  
  @@map("services")
}

model Appointment {
  id          String   @id @default(cuid())
  customerId  String
  
  // Scheduling
  scheduledDate DateTime
  duration      Int      // Duration in minutes
  
  // Status tracking
  status        AppointmentStatus @default(SCHEDULED)
  
  // Service details
  totalPrice    Float
  notes         String?
  
  // Completion details
  completedAt   DateTime?
  completionNotes String?
  beforePhotos    String[] // URLs to photos
  afterPhotos     String[] // URLs to photos
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  appointmentServices AppointmentService[]
  
  @@map("appointments")
}

model AppointmentService {
  id            String @id @default(cuid())
  appointmentId String
  serviceId     String
  quantity      Int    @default(1)
  price         Float  // Actual price charged for this service
  
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [id])
  
  @@unique([appointmentId, serviceId])
  @@map("appointment_services")
}

model Subscription {
  id          String   @id @default(cuid())
  customerId  String
  
  // Subscription details
  frequency   SubscriptionFrequency // WEEKLY, BIWEEKLY, MONTHLY
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean  @default(true)
  
  // Pricing
  totalPrice  Float
  
  // Stripe details
  stripeSubscriptionId String? @unique
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  subscriptionServices SubscriptionService[]
  
  @@map("subscriptions")
}

model SubscriptionService {
  id             String @id @default(cuid())
  subscriptionId String
  serviceId      String
  quantity       Int    @default(1)
  price          Float  // Price for this service in the subscription
  
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  service        Service      @relation(fields: [serviceId], references: [id])
  
  @@unique([subscriptionId, serviceId])
  @@map("subscription_services")
}

model Invoice {
  id          String   @id @default(cuid())
  customerId  String
  
  // Invoice details
  invoiceNumber String   @unique
  amount        Float
  status        InvoiceStatus @default(PENDING)
  dueDate       DateTime
  
  // Stripe details
  stripeInvoiceId String? @unique
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  paidAt        DateTime?
  
  // Relations
  customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@map("invoices")
}

// Enums
enum AppointmentStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum SubscriptionFrequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}